{"version":3,"sources":["Components/Countries/countries.module.css","Components/CountryDetails/countryDetails.module.css","serviceWorker.js","Components/Input/Input.js","Components/Countries/Countries.js","Components/CountryDetails/CountryDetails.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","CssTextField","withStyles","root","color","borderBottomColor","borderColor","TextField","Input","props","onInputChange","event","setState","inputValue","target","value","onEnter","e","key","onInputClick","state","this","inputNode","focus","className","id","label","onChange","onKeyDown","ref","node","React","Component","Countries","fetchCountries","countryName","fetch","then","res","json","status","Error","countries","isEmpty","length","isLoading","errorText","catch","err","message","searchCountry","styles","main","countryWrapper","map","country","to","name","linkStyle","Card","cardStyle","CardContent","cardContent","Typography","component","gutterBottom","variant","capital","topLevelDomain","population","CardMedia","cardFlag","image","flag","title","CountryDetails","params","App","exact","path","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c332e662.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"countries_main__2bYuu\",\"linkStyle\":\"countries_linkStyle__3Xi6b\",\"countryWrapper\":\"countries_countryWrapper__1iotF\",\"cardStyle\":\"countries_cardStyle__2lgv8\",\"cardContent\":\"countries_cardContent__46l5u\",\"countryName\":\"countries_countryName__2YGJ2\",\"pPopulation\":\"countries_pPopulation__2lf-o\",\"cardFlag\":\"countries_cardFlag__3Uwde\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"countryDetails_main__2DCDY\",\"countryWrapper\":\"countryDetails_countryWrapper__1igvY\",\"cardStyle\":\"countryDetails_cardStyle__Czg85\",\"cardContent\":\"countryDetails_cardContent__2f9_N\",\"countryName\":\"countryDetails_countryName__k0zrg\",\"pPopulation\":\"countryDetails_pPopulation__3X8ym\",\"cardFlag\":\"countryDetails_cardFlag__1Ao_f\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './input.css';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst CssTextField = withStyles({\r\n  root: {\r\n    '& label.Mui-focused': {\r\n      color: 'green',\r\n    },\r\n    '& .MuiInput-underline:after': {\r\n      borderBottomColor: 'green',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: 'red',\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: 'yellow',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: 'green',\r\n      },\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst PLACEHOLDER = \"Country name: \";\r\n\r\nexport default class Input extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      inputValue: \"\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.inputNode.focus();\r\n  }\r\n\r\n  onInputChange = (event) => {\r\n    this.setState({inputValue: event.target.value})\r\n  };\r\n\r\n  onEnter = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      this.props.onInputClick(this.state.inputValue);\r\n    }\r\n  };\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"mainInput\">\r\n        <CssTextField\r\n          className=\"inputField\"\r\n          id=\"custom-css-standard-input\"\r\n          label={PLACEHOLDER}\r\n          onChange={this.onInputChange}\r\n          onKeyDown={e => this.onEnter(e)}\r\n          ref={node => this.inputNode = node}/>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Input from '../Input/Input';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport styles from './countries.module.css';\r\n\r\nexport default class Countries extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isEmpty: false,\r\n      isLoading: false,\r\n      errorText: '',\r\n      countries: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n\r\n    this.fetchCountries();\r\n  }\r\n\r\n  fetchCountries = (countryName = '') => {\r\n    if (countryName) {\r\n      fetch(`https://restcountries.eu/rest/v2/name/${countryName}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (res.status === 404) {\r\n            throw new Error('No Data');\r\n          }\r\n          return res;\r\n        })\r\n        .then(res =>\r\n          this.setState({\r\n            countries: res,\r\n            isEmpty: res.length === 0,\r\n            isLoading: false,\r\n            errorText: ''\r\n          })\r\n        )\r\n        .catch(err =>\r\n          this.setState({\r\n            isLoading: false,\r\n            errorText: err.message,\r\n            countries: []\r\n          })\r\n        );\r\n    } else {\r\n      fetch('https://restcountries.eu/rest/v2/all')\r\n        .then(res => res.json())\r\n        .then(res =>\r\n          this.setState({\r\n            countries: res,\r\n            isEmpty: res.length === 0,\r\n            isLoading: false\r\n          })\r\n        )\r\n        .catch(err =>\r\n          this.setState({ isLoading: false, errorText: err.message })\r\n        );\r\n    }\r\n  };\r\n\r\n  searchCountry = countryName => {\r\n    this.setState({ isLoading: true });\r\n\r\n    this.fetchCountries(countryName);\r\n  };\r\n\r\n  render() {\r\n    const { isEmpty, isLoading, errorText, countries } = this.state;\r\n\r\n    return (\r\n      <div className={styles.main}>\r\n        <Input onInputClick={this.searchCountry} />\r\n        <div className={styles.countryWrapper}>\r\n          {errorText ? (\r\n            <p>{errorText}</p>\r\n          ) : isEmpty ? (\r\n            <p>No Data</p>\r\n          ) : isLoading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            countries.map(country => (\r\n              <Link\r\n                to={`/${country.name}`}\r\n                key={country.name}\r\n                className={styles.linkStyle}\r\n              >\r\n                <Card className={styles.cardStyle}>\r\n                  <CardContent className={styles.cardContent}>\r\n                    <Typography\r\n                      className={styles.countryName}\r\n                      component=\"h2\"\r\n                      gutterBottom\r\n                      color=\"primary\"\r\n                    >\r\n                      {country.name}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" gutterBottom color=\"textSecondary\">\r\n                      {country.capital}\r\n                    </Typography>\r\n                    <Typography variant=\"h6\" gutterBottom color=\"textSecondary\">\r\n                      Domain: {country.topLevelDomain}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" component=\"p\">\r\n                      Population: {country.population}\r\n                    </Typography>\r\n                    <CardMedia\r\n                      className={styles.cardFlag}\r\n                      image={country.flag}\r\n                      title=\"Country flag\"\r\n                    />\r\n                  </CardContent>\r\n                </Card>\r\n              </Link>\r\n            ))\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styles from './countryDetails.module.css';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default class CountryDetails extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n      errorText: '',\r\n      country: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ isLoading: true });\r\n\r\n    this.fetchCountries();\r\n  }\r\n\r\n  fetchCountries = () => {\r\n    const { name } = this.props.match.params;\r\n\r\n    if (name) {\r\n      fetch(`https://restcountries.eu/rest/v2/name/${name}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n          if (res.status === 404) {\r\n            throw new Error('No Data');\r\n          }\r\n          return res;\r\n        })\r\n        .then(res =>\r\n          this.setState({\r\n            country: res[0],\r\n            isLoading: false,\r\n            errorText: ''\r\n          })\r\n        )\r\n        .catch(err =>\r\n          this.setState({\r\n            isLoading: false,\r\n            errorText: err.message,\r\n            countries: []\r\n          })\r\n        );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { isLoading, errorText, country } = this.state;\r\n\r\n    return (\r\n      <div className={styles.main}>\r\n        <div className={styles.countryWrapper}>\r\n          {errorText ? (\r\n            <p>{errorText}</p>\r\n          ) : isLoading ? (\r\n            <p>Loading ...</p>\r\n          ) : (\r\n            <Card key={country.name} className={styles.cardStyle}>\r\n              <CardContent className={styles.cardContent}>\r\n                <Typography\r\n                  className={styles.countryName}\r\n                  component=\"h2\"\r\n                  gutterBottom\r\n                  color=\"primary\"\r\n                >\r\n                  {country.name}\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom color=\"textSecondary\">\r\n                  {country.capital}\r\n                </Typography>\r\n                <Typography variant=\"h6\" gutterBottom color=\"textSecondary\">\r\n                  Domain: {country.topLevelDomain}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                  Population: {country.population}\r\n                </Typography>\r\n                <CardMedia\r\n                  image={country.flag}\r\n                  className={styles.cardFlag}\r\n                  title=\"Country flag\"\r\n                />\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nimport Countries from './Components/Countries/Countries';\r\nimport CountryDetails from './Components/CountryDetails/CountryDetails';\r\n\r\nexport default function App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Countries} />\r\n        <Route path=\"/:name\" component={CountryDetails} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}